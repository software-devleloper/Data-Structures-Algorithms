Generate all the subsets of a given array - This is a classic backtracking problem as we need to traverse all the solutions. 

Approaches

1. Iterative Approach

Store all the subsets till the current index & for then add the current element to all the current subsets and add them to the final set, this way you are making sets including and not including the current element 

Implementation

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        ans.add(new ArrayList<>()); 

        for(int num : nums){
            int n = ans.size();
            for(int i = 0 ; i < n ;i++){
                List<Integer> curr = new ArrayList<>(ans.get(i));
                curr.add(num);
                ans.add(curr);
            }
            
        }
        return ans;
    }
}


2. Recursive Solution

At each point add the element to the current path or don't add it to the current path. return the final list. 


class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        ans.add(new ArrayList<>()); 

        for(int num : nums){
            int n = ans.size();
            for(int i = 0 ; i < n ;i++){
                List<Integer> curr = new ArrayList<>(ans.get(i));
                curr.add(num);
                ans.add(curr);
            }
            
        }
        return ans;
    }


}
